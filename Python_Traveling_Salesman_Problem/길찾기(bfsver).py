# -*- coding: utf-8 -*-
"""길찾기(BFSver).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19_w0MqBK7uSHev6Y5DOiTOkXQIeHDpKE
"""

# BFS
import time
t = time.time()
import math
import random
import copy
from turtle import *

city = [] # 도시들을 저장해줄 list
level_max = 20 #깊이 level
start = []
path = []

def rand_city(city_n): # random으로 20개의 도시를 생성해주는 함수
  global city
  count = 0
  while count<city_n:
    x = random.randint(0,100)
    y = random.randint(0,100)
    new_city = [x,y]
    if new_city in city: #좌표가 중복되면 pass
      pass
    else:
      city.append(new_city) #새로운 좌표라면 추가 및 count+=1
      count = count+1
  print("city : ",city) # 도시 20개가 생성되면 출력

def select(now,go): #now는 나의 현위치, go는 남은 city
  distance = [] # 다음 도시 후보들과의 거리를 저장
  for i in range(len(go)):
    x = abs(now[0]-go[i][0])**2 # ax - bx
    y = abs(now[1]-go[i][1])**2 # ay - by
    distance.append(math.sqrt(x+y));
  distance_sort = sorted(distance) #거리 값이 가가운 순서대로 정열
  if len(distance_sort) == 1:
    return distance.index(distance_sort[0]) # 남은 도시 수가 하나라면 즉 탐색할 도시가 하나 남았다면 그냥 추가
  else:
    return distance.index(distance_sort[1]) 
    # 남은 city 중 현위치에서 가장 가까운 도시를 알려준다 [0]은 now도시, 따라서 1번 인덱스에 있는 도시를 return

def draw_map(path):
  penup()
  goto(path[0])
  pendown()
  for i in range(1, 21):
    x = path[i][0]
    y = path[i][1]
    goto(x, y)
  mainloop()
####################main_BFS####################
rand_city(20) # 도시를 random으로 생성한다 100*100 좌표
start = copy.deepcopy(city[0]) # 출발지 도시를 저장
destination = copy.deepcopy(city[0]) # 도착지 도시를 저장

now = start #내가 현재 있는 도시
go = [] #내가 앞으로 갈 도시
now_level = 0 #path에 start(출발지) 도시만 있는 상황

while now_level<level_max: #깊이층이 20개가되면 종료
  index_n = select(now,city)
  next = city[index_n]
  
  path.append(now) #내가 왔던 곳은 경로에 추가
  city.remove(now) #내가 왔던 곳은 삭제
  now = next
  
  now_level += 1
path = path+[destination] #path의 마지막 지점은 도착지와 같기 때문에 위에서 저장해둔 리스트를 추가한다
print("path : ", path)
# print(len(path)) 
print("time :", time.time() - t)  # 현재시각 - 시작시간 = 실행 시간
draw_map(path)